// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/node_management.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CLIRPCService_GetNodeInfo_FullMethodName = "/tee_node_management.CLIRPCService/GetNodeInfo"
	CLIRPCService_GetPeerNode_FullMethodName = "/tee_node_management.CLIRPCService/GetPeerNode"
)

// CLIRPCServiceClient is the client API for CLIRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CLI-RPC service for node information and peer management
type CLIRPCServiceClient interface {
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error)
	GetPeerNode(ctx context.Context, in *GetPeerNodeRequest, opts ...grpc.CallOption) (*GetPeerNodeResponse, error)
}

type cLIRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCLIRPCServiceClient(cc grpc.ClientConnInterface) CLIRPCServiceClient {
	return &cLIRPCServiceClient{cc}
}

func (c *cLIRPCServiceClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeInfoResponse)
	err := c.cc.Invoke(ctx, CLIRPCService_GetNodeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIRPCServiceClient) GetPeerNode(ctx context.Context, in *GetPeerNodeRequest, opts ...grpc.CallOption) (*GetPeerNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPeerNodeResponse)
	err := c.cc.Invoke(ctx, CLIRPCService_GetPeerNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CLIRPCServiceServer is the server API for CLIRPCService service.
// All implementations must embed UnimplementedCLIRPCServiceServer
// for forward compatibility.
//
// CLI-RPC service for node information and peer management
type CLIRPCServiceServer interface {
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error)
	GetPeerNode(context.Context, *GetPeerNodeRequest) (*GetPeerNodeResponse, error)
	mustEmbedUnimplementedCLIRPCServiceServer()
}

// UnimplementedCLIRPCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCLIRPCServiceServer struct{}

func (UnimplementedCLIRPCServiceServer) GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedCLIRPCServiceServer) GetPeerNode(context.Context, *GetPeerNodeRequest) (*GetPeerNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerNode not implemented")
}
func (UnimplementedCLIRPCServiceServer) mustEmbedUnimplementedCLIRPCServiceServer() {}
func (UnimplementedCLIRPCServiceServer) testEmbeddedByValue()                       {}

// UnsafeCLIRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CLIRPCServiceServer will
// result in compilation errors.
type UnsafeCLIRPCServiceServer interface {
	mustEmbedUnimplementedCLIRPCServiceServer()
}

func RegisterCLIRPCServiceServer(s grpc.ServiceRegistrar, srv CLIRPCServiceServer) {
	// If the following call pancis, it indicates UnimplementedCLIRPCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CLIRPCService_ServiceDesc, srv)
}

func _CLIRPCService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIRPCServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLIRPCService_GetNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIRPCServiceServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLIRPCService_GetPeerNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIRPCServiceServer).GetPeerNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLIRPCService_GetPeerNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIRPCServiceServer).GetPeerNode(ctx, req.(*GetPeerNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CLIRPCService_ServiceDesc is the grpc.ServiceDesc for CLIRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CLIRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tee_node_management.CLIRPCService",
	HandlerType: (*CLIRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInfo",
			Handler:    _CLIRPCService_GetNodeInfo_Handler,
		},
		{
			MethodName: "GetPeerNode",
			Handler:    _CLIRPCService_GetPeerNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/node_management.proto",
}
