// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.3
// source: proto/node_management.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Node info service requests and responses
type GetNodeInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeInfoRequest) Reset() {
	*x = GetNodeInfoRequest{}
	mi := &file_proto_node_management_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInfoRequest) ProtoMessage() {}

func (x *GetNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_management_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_node_management_proto_rawDescGZIP(), []int{0}
}

type GetNodeInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        uint32                 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RpcAddress    string                 `protobuf:"bytes,2,opt,name=rpc_address,json=rpcAddress,proto3" json:"rpc_address,omitempty"`
	Cert          []byte                 `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	Key           []byte                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeInfoResponse) Reset() {
	*x = GetNodeInfoResponse{}
	mi := &file_proto_node_management_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInfoResponse) ProtoMessage() {}

func (x *GetNodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_management_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInfoResponse.ProtoReflect.Descriptor instead.
func (*GetNodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_node_management_proto_rawDescGZIP(), []int{1}
}

func (x *GetNodeInfoResponse) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *GetNodeInfoResponse) GetRpcAddress() string {
	if x != nil {
		return x.RpcAddress
	}
	return ""
}

func (x *GetNodeInfoResponse) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *GetNodeInfoResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type GetPeerNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeType      string                 `protobuf:"bytes,1,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"` // "dao", "mesh", "both", or empty for all
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeerNodeRequest) Reset() {
	*x = GetPeerNodeRequest{}
	mi := &file_proto_node_management_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeerNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerNodeRequest) ProtoMessage() {}

func (x *GetPeerNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_management_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerNodeRequest.ProtoReflect.Descriptor instead.
func (*GetPeerNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_node_management_proto_rawDescGZIP(), []int{2}
}

func (x *GetPeerNodeRequest) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

type Peer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RpcAddress    string                 `protobuf:"bytes,2,opt,name=rpc_address,json=rpcAddress,proto3" json:"rpc_address,omitempty"`
	Cert          []byte                 `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	Type          uint32                 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"` // 1: TEE-DAO node, 2: mesh node, 3: App node
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_proto_node_management_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_management_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_proto_node_management_proto_rawDescGZIP(), []int{3}
}

func (x *Peer) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Peer) GetRpcAddress() string {
	if x != nil {
		return x.RpcAddress
	}
	return ""
}

func (x *Peer) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *Peer) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type GetPeerNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peers         []*Peer                `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeerNodeResponse) Reset() {
	*x = GetPeerNodeResponse{}
	mi := &file_proto_node_management_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeerNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerNodeResponse) ProtoMessage() {}

func (x *GetPeerNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_management_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerNodeResponse.ProtoReflect.Descriptor instead.
func (*GetPeerNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_node_management_proto_rawDescGZIP(), []int{4}
}

func (x *GetPeerNodeResponse) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

var File_proto_node_management_proto protoreflect.FileDescriptor

const file_proto_node_management_proto_rawDesc = "" +
	"\n" +
	"\x1bproto/node_management.proto\x12\x13tee_node_management\"\x14\n" +
	"\x12GetNodeInfoRequest\"u\n" +
	"\x13GetNodeInfoResponse\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\rR\x06nodeId\x12\x1f\n" +
	"\vrpc_address\x18\x02 \x01(\tR\n" +
	"rpcAddress\x12\x12\n" +
	"\x04cert\x18\x03 \x01(\fR\x04cert\x12\x10\n" +
	"\x03key\x18\x04 \x01(\fR\x03key\"1\n" +
	"\x12GetPeerNodeRequest\x12\x1b\n" +
	"\tnode_type\x18\x01 \x01(\tR\bnodeType\"_\n" +
	"\x04Peer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x1f\n" +
	"\vrpc_address\x18\x02 \x01(\tR\n" +
	"rpcAddress\x12\x12\n" +
	"\x04cert\x18\x03 \x01(\fR\x04cert\x12\x12\n" +
	"\x04type\x18\x04 \x01(\rR\x04type\"F\n" +
	"\x13GetPeerNodeResponse\x12/\n" +
	"\x05peers\x18\x01 \x03(\v2\x19.tee_node_management.PeerR\x05peers2\xd3\x01\n" +
	"\rCLIRPCService\x12`\n" +
	"\vGetNodeInfo\x12'.tee_node_management.GetNodeInfoRequest\x1a(.tee_node_management.GetNodeInfoResponse\x12`\n" +
	"\vGetPeerNode\x12'.tee_node_management.GetPeerNodeRequest\x1a(.tee_node_management.GetPeerNodeResponseB\tZ\a./protob\x06proto3"

var (
	file_proto_node_management_proto_rawDescOnce sync.Once
	file_proto_node_management_proto_rawDescData []byte
)

func file_proto_node_management_proto_rawDescGZIP() []byte {
	file_proto_node_management_proto_rawDescOnce.Do(func() {
		file_proto_node_management_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_node_management_proto_rawDesc), len(file_proto_node_management_proto_rawDesc)))
	})
	return file_proto_node_management_proto_rawDescData
}

var file_proto_node_management_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_node_management_proto_goTypes = []any{
	(*GetNodeInfoRequest)(nil),  // 0: tee_node_management.GetNodeInfoRequest
	(*GetNodeInfoResponse)(nil), // 1: tee_node_management.GetNodeInfoResponse
	(*GetPeerNodeRequest)(nil),  // 2: tee_node_management.GetPeerNodeRequest
	(*Peer)(nil),                // 3: tee_node_management.Peer
	(*GetPeerNodeResponse)(nil), // 4: tee_node_management.GetPeerNodeResponse
}
var file_proto_node_management_proto_depIdxs = []int32{
	3, // 0: tee_node_management.GetPeerNodeResponse.peers:type_name -> tee_node_management.Peer
	0, // 1: tee_node_management.CLIRPCService.GetNodeInfo:input_type -> tee_node_management.GetNodeInfoRequest
	2, // 2: tee_node_management.CLIRPCService.GetPeerNode:input_type -> tee_node_management.GetPeerNodeRequest
	1, // 3: tee_node_management.CLIRPCService.GetNodeInfo:output_type -> tee_node_management.GetNodeInfoResponse
	4, // 4: tee_node_management.CLIRPCService.GetPeerNode:output_type -> tee_node_management.GetPeerNodeResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_node_management_proto_init() }
func file_proto_node_management_proto_init() {
	if File_proto_node_management_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_node_management_proto_rawDesc), len(file_proto_node_management_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_node_management_proto_goTypes,
		DependencyIndexes: file_proto_node_management_proto_depIdxs,
		MessageInfos:      file_proto_node_management_proto_msgTypes,
	}.Build()
	File_proto_node_management_proto = out.File
	file_proto_node_management_proto_goTypes = nil
	file_proto_node_management_proto_depIdxs = nil
}
