// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.5.0
// source: appid_service.proto

package appid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppIDService_GetPublicKeyByAppID_FullMethodName    = "/appid.AppIDService/GetPublicKeyByAppID"
	AppIDService_GetDeploymentAddresses_FullMethodName = "/appid.AppIDService/GetDeploymentAddresses"
)

// AppIDServiceClient is the client API for AppIDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AppID service for getting public key information and file downloads by app ID
type AppIDServiceClient interface {
	// Get public key information by app ID
	GetPublicKeyByAppID(ctx context.Context, in *GetPublicKeyByAppIDRequest, opts ...grpc.CallOption) (*GetPublicKeyByAppIDResponse, error)
	// Voting service methods
	// GetDeploymentAddresses gets deployment-client addresses for given app IDs (for voting coordinator)
	GetDeploymentAddresses(ctx context.Context, in *GetDeploymentAddressesRequest, opts ...grpc.CallOption) (*GetDeploymentAddressesResponse, error)
}

type appIDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppIDServiceClient(cc grpc.ClientConnInterface) AppIDServiceClient {
	return &appIDServiceClient{cc}
}

func (c *appIDServiceClient) GetPublicKeyByAppID(ctx context.Context, in *GetPublicKeyByAppIDRequest, opts ...grpc.CallOption) (*GetPublicKeyByAppIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicKeyByAppIDResponse)
	err := c.cc.Invoke(ctx, AppIDService_GetPublicKeyByAppID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appIDServiceClient) GetDeploymentAddresses(ctx context.Context, in *GetDeploymentAddressesRequest, opts ...grpc.CallOption) (*GetDeploymentAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeploymentAddressesResponse)
	err := c.cc.Invoke(ctx, AppIDService_GetDeploymentAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppIDServiceServer is the server API for AppIDService service.
// All implementations must embed UnimplementedAppIDServiceServer
// for forward compatibility.
//
// AppID service for getting public key information and file downloads by app ID
type AppIDServiceServer interface {
	// Get public key information by app ID
	GetPublicKeyByAppID(context.Context, *GetPublicKeyByAppIDRequest) (*GetPublicKeyByAppIDResponse, error)
	// Voting service methods
	// GetDeploymentAddresses gets deployment-client addresses for given app IDs (for voting coordinator)
	GetDeploymentAddresses(context.Context, *GetDeploymentAddressesRequest) (*GetDeploymentAddressesResponse, error)
	mustEmbedUnimplementedAppIDServiceServer()
}

// UnimplementedAppIDServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppIDServiceServer struct{}

func (UnimplementedAppIDServiceServer) GetPublicKeyByAppID(context.Context, *GetPublicKeyByAppIDRequest) (*GetPublicKeyByAppIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKeyByAppID not implemented")
}
func (UnimplementedAppIDServiceServer) GetDeploymentAddresses(context.Context, *GetDeploymentAddressesRequest) (*GetDeploymentAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentAddresses not implemented")
}
func (UnimplementedAppIDServiceServer) mustEmbedUnimplementedAppIDServiceServer() {}
func (UnimplementedAppIDServiceServer) testEmbeddedByValue()                      {}

// UnsafeAppIDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppIDServiceServer will
// result in compilation errors.
type UnsafeAppIDServiceServer interface {
	mustEmbedUnimplementedAppIDServiceServer()
}

func RegisterAppIDServiceServer(s grpc.ServiceRegistrar, srv AppIDServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppIDServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppIDService_ServiceDesc, srv)
}

func _AppIDService_GetPublicKeyByAppID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyByAppIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppIDServiceServer).GetPublicKeyByAppID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppIDService_GetPublicKeyByAppID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppIDServiceServer).GetPublicKeyByAppID(ctx, req.(*GetPublicKeyByAppIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppIDService_GetDeploymentAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppIDServiceServer).GetDeploymentAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppIDService_GetDeploymentAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppIDServiceServer).GetDeploymentAddresses(ctx, req.(*GetDeploymentAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppIDService_ServiceDesc is the grpc.ServiceDesc for AppIDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppIDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appid.AppIDService",
	HandlerType: (*AppIDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKeyByAppID",
			Handler:    _AppIDService_GetPublicKeyByAppID_Handler,
		},
		{
			MethodName: "GetDeploymentAddresses",
			Handler:    _AppIDService_GetDeploymentAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appid_service.proto",
}
